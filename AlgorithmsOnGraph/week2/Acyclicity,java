import java.util.ArrayList;
import java.util.Scanner;

public class Acyclicity {
    private static boolean[] visited;
    private static boolean[] recursiveStack;
    private static int acyclic(ArrayList<Integer>[] adj) {
        //write your code here
         visited=new boolean[adj.length];
         for(int i=0;i<visited.length;i++){
            visited[i]=false;
        }
        recursiveStack=new boolean[adj.length];
         for(int i=0;i<recursiveStack.length;i++){
            visited[i]=false;
        }
        for(int i=0;i<adj.length;i++){
            if(DFS(adj,i)==true){
                return 1;
            }
        }
        return 0;
    }
    public static boolean DFS(ArrayList<Integer>[] adj,int x){
             if(recursiveStack[x]==true){
                return true;
             }
             if(visited[x]==true){
                return false;
             }
             visited[x]=true;
             recursiveStack[x]=true;
             ArrayList<Integer> neighbourList=adj[x];
             for(Integer neighbour:neighbourList){
                if(DFS(adj,neighbour)==true){
                       return true;
                }
             }
             recursiveStack[x]=false;
             return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        System.out.println(acyclic(adj));
    }
}

